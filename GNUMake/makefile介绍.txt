1. makefile介绍
需要有一个makefile文件
有以下规则：
(1) 如果这个工程没有编译过，那么我们的所有c文件都要编译并被链接(没make过就完全make)
(2) 如果这个工程的几个c文件被修改，那么我们只编译被修改的c文件,并链接目标程序(c文件修改，部分make)
(3) 如果这个工程的头文件被改变，那么我们需要编译引用了这几个头文件打的c文件,并链接目标文件

总结：
1. 没有make过就完全make
2. 如果修改了c文件,就make修改了的c文件
3. 如果修改了h文件,就make引用了h文件的c文件

2. makefile规则
target ... : prerequisites ...
    recipe
    ...
    ...
+ target
可以是obj,exe,label
+ prerequisites
生成target所依赖的文件
+ recipe
该target要执行的命令(任意的shell命令)

总结:
prerequisites中如果有一个以上的文件比target文件要新的话,recipe所定义的命令就会执行

3. 示例
对于一个有3个头文件和8个c文件的工程

edit : main.o kbd.o command.o display.o \
        insert.o search.o files.o utils.o
    cc -o edit main.o kbd.o command.o display.o \
        insert.o search.o files.o utils.o

main.o : main.c defs.h
    cc -c main.c
kbd.o : kbd.c defs.h command.h
    cc -c kbd.c
command.o : command.c defs.h command.h
    cc -c command.c
display.o : display.c defs.h buffer.h
    cc -c display.c
insert.o : insert.c defs.h buffer.h
    cc -c insert.c
search.o : search.c defs.h buffer.h
    cc -c search.c
files.o : files.c defs.h buffer.h command.h
    cc -c files.c
utils.o : utils.c defs.h
    cc -c utils.c
clean :
    rm edit main.o kbd.o command.o display.o \
        insert.o search.o files.o utils.o

+ 用反斜杠换行
+ 执行make可以生成可执行文件edit
+ make clean 可以删除可执行文件和所有的中间目标文件
+ recipe 要用tab开头
+ 其中 clean 不是一个文件而是一个动作
+ 要执行这个命令要在make命令后明显指出 make clean

4. makefile中使用变量
可以理解成C语言中的宏
object = main.o kbd.o command.o display.o \
    insert.o search.o files.o utils.o
然后通过 $(object) 进行使用

5. make自动推导
对于GNU的make
+ 对于whatever.o , 会把whatever.c依赖文件自动加上
  cc -c whatever.c也会被推导出来

6. 清空目录的规则
每一个makefile中都应该写一个清空目标文件和可执行文件的规则
+ 一般风格
clean:
    rm edit $(objects)
+ 更稳健的做法
.PHONY : clean
clean :
    -rm edit $(objects)
- .PHONY 表示clean是一个伪目标
- 在-rm前面的减号的意思是当某些文件出现问题，不要管，继续执行

7. Makefile的具体组成
显示规则，隐式规则，变量定义，指令，注释
(1) 显示规则：说明了如何生成一个或多个目标文件
(2) 隐式规则：自动推导
(3) 变量的定义
(4) 指令
(5) 注释：只有行注释，用#，命令必须要用Tab开始

8. Makefile的文件名
可以用GNUmakefile,makefile,Makefile
GNUmakefile只有GNU可以用
+ 也可以使用别的文件名
+ 要指定特定的Makefile,可以使用make的-f或--file
比如 make -f Make.Solaris 或 make --file Make.Linux
+ 可以指定多个makefile

9. 包含其他的Makefile
使用 include <filenames>
+ include前面可以有一些空字符，但不能是Tab键开始
被包含的文件会原模原样的放在当前文件的包含位置
+ <filenames>可以是当前操作系统Shell的文件模式(可以包含路径和通配符)

10. 环境变量MAKEFILES
如果当前环境中定义了环境变量MAKEFILES,那么make会把这个变量中的值做一个类似于include的动作
这个变量中的值是其他的Makefile，用空格间隔

11. make的工作方式
(1) 读入所有的Makefile
(2) 读入被include的其他Makefile
(3) 初始化文件中的变量
(4) 推导隐式规则，并分析所有规则
(5) 为所有的目标文件创建依赖关系链
(6) 根据依赖关系，决定哪些目标要重新生成
(7) 执行生成命令

