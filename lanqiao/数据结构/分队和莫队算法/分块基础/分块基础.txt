暴力分块基本思想
+   对一个数组设置一个块大小sz (当 sz = √n 时可以达到较好的时间复杂度)
    然后将每个元素划分给一个块 (a[i] -> b[i/sz])
    并用 bel[i] 记录下 i 所属的块
    用 L[blo],R[blo] 表示块的左右端点
+   算法实现：
    sz = sqrt(n) + 1;
    for(int i = 1;i <= n;++i)
    {
        bel[i] = i / sz;
        sum[bel[i]] += a[i];
        if(i > 1 && bel[i] != bel[i-1])
            L[bel[i]] = i;
            R[bel[i-1]] = i - 1;
    }
    L[bel[1]] = 1;
    R[bel[n]] = n; 
+   更新
    将区间 [l,r] 分为三块：
    [l,R[bel[l]]] , [L[bel[l+1]],R[bel[r-1]]] , [R[bel[r]],r];

分块加法求区间和
+   用sum[blo]数组记录块blo的和
    add[blo]记录块blo中每个元素的增加量
+   修改操作：
    void Add(int l,int r,ll x)
    {
        if(bel[l] == bel[r])
        {
            for(int i = l;i<=r;++i)
            {
                a[i] += x;
                sum[bel[i]] += x;
            }
            return;
        }
        for(int i = l;i<=R[bel[l]];++i)
        {
            a[i]+=x;
            sum[bel[i]] += x;
        }

        for(int blo = bel[l] + 1;blo < bel[r];++blo)
            add[blo] += x;

        for(int i = L[bel[r]];i<=r;++i)
        {
            a[i]+=x;
            sum[bel[i]] += x;
        }
    }
+   查询操作
    ll getsum(int l,int r)
    {
        ll res = 0;
        if(bel[l] == bel[r])
        {
            for(int i = l;i<=r;++i)
                res += a[i] + add[bel[i]];
            return res;
        }

        for(int i = l;i <= R[bel[l]]; ++i)
            res += a[i] + add[bel[i]];
        
        for(int blo = bel[l] + 1;blo < bel[r];++blo)
            res += sum[blo] + add[blo] * (R[blo] - L[blo] + 1);

        for(int i = R[bel[r]];i <= r; ++i)
            res += a[i] + add[bel[i]];
        return res;
    }

分块区间加法求比x小的个数
+   将blo块的元素全部放入数组v[blo]中并进行排序，这个数组可以用vector实现
    第一和第三部分暴力求解，第二部分用 lower_bound
    为保持有序性需要对第一和第三部分resort，第二部分自然有序不用resort
+   重新排序
    void resort(int blo)
    {
        v[blo].clear();
        for(int i = L[blo];i<=R[blo];++i)
        {
            v[blo].push_back(a[i]);
        }
        stable_sort(v[blo].begin(),v[blo].end());//stable_sort()稳定排序，不改变相同元素的位置
    }
+   修改操作
    void Add(int l,int r,ll x)
    {
        if(bel[l] == bel[r])
        {
            for(int i = l;i<=r;++i)
            {
                a[i]+=x;
            }
            resort(bel[l]);
            return;
        }
        for(int i = l;i<=R[bel[l]];++i)
        {
            a[i] += x;
        }
        resort(bel[l]);

        for(int blo = bel[l] + 1;blo < bel[r] ;++blo)
        {
            add[blo] += x;
        }
        
        for(int i = L[bel[r]];i <= r;++i)
        {
            a[i] += x;
        }
        resort(bel[r]);
    }
+   查找操作
    int f(int l,int r,ll x)
    {
        int res = 0;
        if(bel[l] == bel[r])
        {
            for(int i = l;i <= r;++i)
            {
                res += (int)(a[i] + add[bel[i]] < x);
            }
            return res;
        }
        for(int i = 1;i <= R[bel[l]];++i)
        {
            res += (int)(a[i] + add[bel[i]] < x);
        }
        for(int blo = bel[l] + 1;blo < bel[r];++blo)
        {
            res += lower_bound(v[blo].begin(),v[blo].end(),x - add[blo]) - v[blo].beign();
        }
        for(int i = L[bel[r]];i<=r;++i)
        {
            res += (int)(a[i] + add[bel[i]] < x);
        }
        return res;
    }

分块区间开根号求和
+   一个整数最多开方约log次就会降到1,于是可以跳过
+   用一个tag[blo]表示块blo整体开方的次数
+   算法实现：
    void midify(int l,int r)
    {
        for(int i = l;i<=r;++i)
        {
            sum[bel[i]] -= a[i];
            a[i] = sqrt(a[i]);
            sum[bel[i]] += a[i];
        }
    }
    void Sqrt(int l,int r)
    {
        if(bel[l] == bel[r])
        {
            modify(l,r);
            return;
        }
        modify(l,R[bel[l]]);
        for(int blo = bel[l] + 1;blo < bel[r];++blo)
        {
            if(tag[blo] >= 7)continue;
            tag[blo]++;
            modify(L[blo],R[blo]);
        }
        modify(L[bel[r]],r);
    }