数组

静态初始化
int[] a;
a = new int[]{1,2,3,4,5};

int[] a = new int[]{1,2,3,4,5};

int[] a = {1,2,3,4,5};

动态初始化
int[] a = new int[5];
a = new int[5];

有默认值

array.length 指明长度

java虚拟机
+ 虚拟机栈 : 局部变量
+ 堆 : new
+ 方法区
+ 本地方法栈
+ 程序计数器

数组是引用数据常量
没有 new 就不会新建空间


二维数组
+ 列不固定
int [][] a = new int[2][];
a[0] = new int[3];
a[1] = new int[2];
要再单独分配空间
+ 列固定
int [][] a = new int[2][3];

+ int[] a,b[];
a是一维数组，b是二维数组

int [][] a = new int[2][3];
a.length 值是2，是行数，不是个数

数组的排序：
插入排序
希尔排序
选择排序
堆排序
冒泡排序
快速排序
归并排序
计数排序
桶排序
基数排序

内部排序性能比较与选择
性能比较
+ 平均时间快速排序最好
+ 最坏情况下堆排序和归并排序更好
+ 简单排序：插入排序，选择排序，冒泡排序
+ 复杂排序：希尔排序，归并排序，快速排序，堆排序
+ 稳定排序：插入排序，冒泡排序，归并排序
+ 不稳定排序：选择排序，希尔排序，快速排序，堆排序
+ 规模：小规模用简单排序，大规模用复杂排序
排序选择
+ n <= 50 采用插入排序或选择排序
+ 小规模用插入，较大用选择
+ 基本有序用插入，冒泡或随机快速
+ 规模较大用快速排序，堆排序，归并排序

Arrays工具类
java.util.Arrays
boolean equals(int[] a,int[] b);
String toString(int[] a);
void fill(int[] a,int val);
void sort(int[] a);
int binarySearch(int[] a,int key);